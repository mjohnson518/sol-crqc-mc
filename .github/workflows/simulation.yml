name: Run Simulation

# This workflow runs simulations in GitHub's cloud infrastructure
# Results are stored as artifacts (NOT committed to repo)
# Large results (>100MB) are summarized to avoid storage limits

on:
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of iterations'
        required: false
        default: '1000'
      enable_enhanced:
        description: 'Enable enhanced models'
        required: false
        default: 'true'
        type: boolean

jobs:
  simulate:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-sim-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-sim-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure simulation
      run: |
        echo "Configuring simulation with ${{ github.event.inputs.iterations }} iterations"
        echo "Enhanced models: ${{ github.event.inputs.enable_enhanced }}"
    
    - name: Run simulation
      run: |
        python run_simulation.py \
          --iterations ${{ github.event.inputs.iterations }} \
          --output simulation_results/github_run_$(date +%Y%m%d_%H%M%S)
      env:
        PYTHONUNBUFFERED: 1
    
    - name: Generate reports
      run: |
        # Generate markdown report
        echo "Generating simulation reports..."
        # Add report generation command here
    
    - name: Prepare lightweight summary
      run: |
        # Create a summary directory with only essential files
        mkdir -p summary_output
        
        # Copy only the latest run's key files (not all historical data)
        latest_run=$(ls -td simulation_results/run_* | head -1)
        if [ -d "$latest_run" ]; then
          # Copy only essential files, not raw data
          cp -r $latest_run/reports/*.md summary_output/ 2>/dev/null || true
          cp -r $latest_run/reports/*.json summary_output/ 2>/dev/null || true
          cp -r $latest_run/plots/*dashboard*.png summary_output/ 2>/dev/null || true
          
          # Create a summary file
          echo "# Simulation Summary" > summary_output/SUMMARY.md
          echo "Run: $(basename $latest_run)" >> summary_output/SUMMARY.md
          echo "Iterations: ${{ github.event.inputs.iterations }}" >> summary_output/SUMMARY.md
          echo "Size: $(du -sh $latest_run | cut -f1)" >> summary_output/SUMMARY.md
        fi
    
    - name: Upload summary only (not full results)
      uses: actions/upload-artifact@v3
      with:
        name: simulation-summary
        path: summary_output/
        retention-days: 30  # Keep for 30 days instead of 90
        if-no-files-found: warn
    
    - name: Report size warning
      run: |
        # Check size and warn if large
        if [ -d "simulation_results" ]; then
          SIZE=$(du -sm simulation_results | cut -f1)
          if [ $SIZE -gt 100 ]; then
            echo "⚠️ Simulation results are ${SIZE}MB - too large for artifacts" >> $GITHUB_STEP_SUMMARY
            echo "Only summary files were uploaded. Full results remain on runner." >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          // Read summary if it exists
          const summaryPath = 'simulation_results/summary.md';
          if (fs.existsSync(summaryPath)) {
            const summary = fs.readFileSync(summaryPath, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Simulation Results\n\n${summary}`
            });
          }
